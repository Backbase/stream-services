<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.3</version>
        <relativePath/>
    </parent>
    <groupId>com.backbase.stream</groupId>
    <artifactId>stream-starter</artifactId>
    <name>Stream :: SDK :: stream-starter</name>
    <version>6.12.0</version>
    <packaging>pom</packaging>

    <organization>
        <name>Backbase B.V.</name>
        <url>http://www.backbase.com</url>
    </organization>
    <licenses>
        <license/>
    </licenses>
    <developers>
        <developer/>
    </developers>
    <properties>
        <arch-unit-maven-plugin.version>3.0.0</arch-unit-maven-plugin.version>
        <archunit.backbase.ArchitectureRules.skip>false</archunit.backbase.ArchitectureRules.skip>
        <archunit.backbase.ConfigurationRules.skip>false</archunit.backbase.ConfigurationRules.skip>
        <archunit.backbase.ControllerRules.skip>false</archunit.backbase.ControllerRules.skip>
        <archunit.backbase.DataMappingRules.skip>false</archunit.backbase.DataMappingRules.skip>
        <archunit.backbase.GeneralCodingRules.skip>false</archunit.backbase.GeneralCodingRules.skip>
        <archunit.backbase.LoggingRules.skip>false</archunit.backbase.LoggingRules.skip>
        <archunit.backbase.NamingConventionRules.skip>false</archunit.backbase.NamingConventionRules.skip>
        <archunit.backbase.RelationalPersistenceRules.skip>false</archunit.backbase.RelationalPersistenceRules.skip>
        <!-- Do not fail build if ArchUnit rules violated -->
        <archunit.noFailOnError>false</archunit.noFailOnError>
        <!-- Set package to apply ArchUnit maven rules on -->
        <archunit.projectPackage>${main-package}</archunit.projectPackage>
        <!-- Skip arch unit maven rules -->
        <archunit.skip>false</archunit.skip>
        <checkstyle.allowMissingThrowsTags>false</checkstyle.allowMissingThrowsTags>
        <checkstyle.config.location>backbase_checks.xml</checkstyle.config.location>
        <!-- Checkstyle is disabled initially, to be enabled by default in future releases -->
        <checkstyle.disable.checks>true</checkstyle.disable.checks>
        <checkstyle.fail-on-violation>true</checkstyle.fail-on-violation>
        <checkstyle.fails-on-error>true</checkstyle.fails-on-error>
        <!-- Checkstyle -->
        <checkstyle.version>10.3.1</checkstyle.version>
        <coverage.reports.dir>${project.build.directory}/coverage-reports</coverage.reports.dir>
        <!-- azure-identity -->
        <docker.azure.identity>compile</docker.azure.identity>
        <!-- base image gcr.io/distroless/java21-debian12:nonroot -->
        <docker.distroless.image>gcr.io/distroless/java21-debian12@sha256:68e11975ae9e7911becda53c8746fd4564182c2c402a1c4c0d4e3479ad50b3ba</docker.distroless.image>
        <docker.image.name>${docker.repo.url}/${docker.repo.project}/${project.artifactId}</docker.image.name>
        <docker.jdbc.mssql>compile</docker.jdbc.mssql>
        <!-- image dependencies -->
        <!-- db drivers -->
        <docker.jdbc.mysql>compile</docker.jdbc.mysql>
        <docker.jdbc.oracle>compile</docker.jdbc.oracle>
        <!-- execution control -->
        <docker.jib.goal>build</docker.jib.goal>
        <!-- ## docker configuration -->
        <docker.repo.project>development</docker.repo.project>
        <docker.scs.azure>compile</docker.scs.azure>
        <docker.scs.kafka>compile</docker.scs.kafka>
        <!-- binders -->
        <docker.scs.rabbit>compile</docker.scs.rabbit>
        <!-- when enabled removes "SNAPSHOT" from default tag (project version) -->
        <docker.tag.trim>false</docker.tag.trim>
        <doxia-module-markdown.version>1.9.1</doxia-module-markdown.version>
        <!-- Skip enforcing banned dependencies such as mysql drivers, this is used for building containers in the docker-image profile -->
        <enforce-banned-dependencies.skip>false</enforce-banned-dependencies.skip>
        <flatten-maven-plugin.version>1.5.0</flatten-maven-plugin.version>
        <gmavenplus-plugin.version>3.0.0</gmavenplus-plugin.version>
        <!-- other config -->
        <jacoco.version>0.8.11</jacoco.version>
        <japicmp.plugin.version>0.17.2</japicmp.plugin.version>
        <java.version>21</java.version>
        <!-- Plugin versions -->
        <jib-maven-plugin.version>3.3.2</jib-maven-plugin.version>
        <!-- jib preset properties -->
        <jib.container.creationTime>USE_CURRENT_TIMESTAMP</jib.container.creationTime>
        <jib.container.ports>8080</jib.container.ports>
        <!-- latest, managed up from '4.24.0' BEFOUND-1134 -->
        <liquibase.version>4.25.0</liquibase.version>
        <!-- set by groovy <local-client.arch>amd64</local-client.arch> -->
        <local-client.os>linux</local-client.os>
        <maven-checkstyle-plugin.version>3.1.2</maven-checkstyle-plugin.version>
        <maven-release-plugin.version>3.0.1</maven-release-plugin.version>
        <maven-site-plugin.version>4.0.0-M9</maven-site-plugin.version>
        <!--breaking change detection -->
        <previous.release.version>0.0.0</previous.release.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <properties-maven-plugin.version>1.0.0</properties-maven-plugin.version>
        <reflow-velocity-tools.version>1.1.1</reflow-velocity-tools.version>
        <run.addResources>false</run.addResources>
        <skip.integration.tests>false</skip.integration.tests>
        <skip.unit.tests>false</skip.unit.tests>
        <sonar-maven-plugin.version>3.10.0.2594</sonar-maven-plugin.version>
        <sonar.coverage.jacoco.xmlReportPaths>${project.reporting.outputDirectory}/jacoco-ut/jacoco.xml,${project.reporting.outputDirectory}/jacoco-it/jacoco.xml</sonar.coverage.jacoco.xmlReportPaths>
        <sonar.exclusions>target/checkout/**,src/test/**</sonar.exclusions>
        <sonar.java.binaries>target/classes/</sonar.java.binaries>
        <sonar.java.codeCoveragePlugin>jacoco</sonar.java.codeCoveragePlugin>
        <sonar.sources>${project.basedir}/src/main/</sonar.sources>
        <sonar.tests>${project.basedir}/src/test/</sonar.tests>
        <sortpom-maven-plugin.version>3.3.0</sortpom-maven-plugin.version>
        <spring-cloud-app-starter-metadata-maven-plugin.version>2.0.2.RELEASE</spring-cloud-app-starter-metadata-maven-plugin.version>
        <ssdk-checkstyle-config.version>1.0.22</ssdk-checkstyle-config.version>
        <velocity.version>1.7</velocity.version>
    </properties>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.backbase.buildingblocks</groupId>
                <artifactId>backbase-building-blocks-release</artifactId>
                <version>18.1.0</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>com.azure</groupId>
                <artifactId>azure-messaging-servicebus</artifactId>
                <version>7.17.6</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>org.hibernate.validator</groupId>
            <artifactId>hibernate-validator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.openapitools</groupId>
            <artifactId>jackson-databind-nullable</artifactId>
        </dependency>
        <dependency>
            <groupId>net.logstash.logback</groupId>
            <artifactId>logstash-logback-encoder</artifactId>
        </dependency>
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
        </dependency>
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-core</artifactId>
        </dependency>
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
        </dependency>
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-tracing</artifactId>
        </dependency>
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-tracing-bridge-otel</artifactId>
        </dependency>
        <dependency>
            <groupId>io.opentelemetry</groupId>
            <artifactId>opentelemetry-exporter-zipkin</artifactId>
        </dependency>
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-tracing-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.opentelemetry</groupId>
            <artifactId>opentelemetry-sdk-testing</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Use Backbase SDK Logging rules, ensure no dependency is added thouhgh -->
        <dependency>
            <groupId>com.backbase.buildingblocks</groupId>
            <artifactId>service-sdk-starter-logging</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>net.logstash.logback</groupId>
                    <artifactId>logstash-logback-encoder</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-autoconfigure</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-context</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- Annotation Processors. Not compiled -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-logging</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-config</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-kubernetes-fabric8-config</artifactId>
        </dependency>
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-annotations</artifactId>
        </dependency>
        <dependency>
            <groupId>io.swagger.core.v3</groupId>
            <artifactId>swagger-annotations</artifactId>
        </dependency>
        <dependency>
            <groupId>io.opentelemetry</groupId>
            <artifactId>opentelemetry-exporter-otlp</artifactId>
        </dependency>
    </dependencies>
    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>com.societegenerale.commons</groupId>
                    <artifactId>arch-unit-maven-plugin</artifactId>
                    <version>${arch-unit-maven-plugin.version}</version>
                </plugin>
                <!-- Load the properties from app metadata json as maven property -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>properties-maven-plugin</artifactId>
                    <version>${properties-maven-plugin.version}</version>
                    <executions>
                        <execution>
                            <id>apps-metadata</id>
                            <goals>
                                <goal>read-project-properties</goal>
                            </goals>
                            <phase>process-classes</phase>
                            <configuration>
                                <files>
                                    <file>${project.build.outputDirectory}/META-INF/spring-configuration-metadata-encoded.properties</file>
                                </files>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>
                <!-- Generate SCDF app metadata from 'ConfigurationProperties' classes -->
                <plugin>
                    <groupId>org.springframework.cloud</groupId>
                    <artifactId>spring-cloud-app-starter-metadata-maven-plugin</artifactId>
                    <version>${spring-cloud-app-starter-metadata-maven-plugin.version}</version>
                    <configuration>
                        <storeFilteredMetadata>true</storeFilteredMetadata>
                    </configuration>
                    <executions>
                        <execution>
                            <id>aggregate-metadata</id>
                            <goals>
                                <goal>aggregate-metadata</goal>
                            </goals>
                            <phase>compile</phase>
                        </execution>
                    </executions>
                </plugin>
                <plugin>
                    <groupId>com.google.cloud.tools</groupId>
                    <artifactId>jib-maven-plugin</artifactId>
                    <version>${jib-maven-plugin.version}</version>
                    <configuration>
                        <from>
                            <platforms>
                                <platform>
                                    <architecture>amd64</architecture>
                                    <os>linux</os>
                                </platform>
                                <platform>
                                    <architecture>arm64</architecture>
                                    <os>linux</os>
                                </platform>
                            </platforms>
                        </from>
                        <pluginExtensions>
                            <pluginExtension>
                                <implementation>com.backbase.buildingblocks.maven.jib.dependencies.JibDependenciesExtension</implementation>
                                <configuration implementation="com.backbase.buildingblocks.maven.jib.dependencies.DependenciesExtensionConfiguration">
                                    <dependencies>
                                        <!-- additional config -->
                                        <dependency>
                                            <groupId>com.backbase.buildingblocks</groupId>
                                            <artifactId>auxiliary-config</artifactId>
                                        </dependency>
                                        <!-- add db drivers -->
                                        <dependency>
                                            <groupId>com.mysql</groupId>
                                            <artifactId>mysql-connector-j</artifactId>
                                            <scope>${docker.jdbc.mysql}</scope>
                                        </dependency>
                                        <dependency>
                                            <groupId>com.microsoft.sqlserver</groupId>
                                            <artifactId>mssql-jdbc</artifactId>
                                            <scope>${docker.jdbc.mssql}</scope>
                                        </dependency>
                                        <!-- For managed identity for Azure DB-->
                                        <dependency>
                                            <groupId>com.azure</groupId>
                                            <artifactId>azure-identity</artifactId>
                                            <scope>${docker.azure.identity}</scope>
                                        </dependency>
                                        <dependency>
                                            <groupId>com.oracle.database.jdbc</groupId>
                                            <artifactId>ojdbc8</artifactId>
                                            <scope>${docker.jdbc.oracle}</scope>
                                        </dependency>
                                        <!-- add cloud stream binders -->
                                        <dependency>
                                            <groupId>org.springframework.cloud</groupId>
                                            <artifactId>spring-cloud-stream-binder-rabbit</artifactId>
                                            <scope>${docker.scs.rabbit}</scope>
                                        </dependency>
                                        <dependency>
                                            <groupId>org.springframework.cloud</groupId>
                                            <artifactId>spring-cloud-stream-binder-kafka</artifactId>
                                            <scope>${docker.scs.kafka}</scope>
                                        </dependency>
                                        <dependency>
                                            <groupId>com.azure.spring</groupId>
                                            <artifactId>spring-cloud-azure-stream-binder-servicebus</artifactId>
                                            <scope>${docker.scs.azure}</scope>
                                        </dependency>
                                    </dependencies>
                                </configuration>
                            </pluginExtension>
                            <pluginExtension>
                                <implementation>com.backbase.buildingblocks.maven.jib.entrypoint.JibEntrypointExtension</implementation>
                            </pluginExtension>
                        </pluginExtensions>
                    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>com.backbase.buildingblocks</groupId>
                            <artifactId>jib-dependencies-extension</artifactId>
                            <version>18.1.0</version>
                        </dependency>
                        <dependency>
                            <groupId>com.backbase.buildingblocks</groupId>
                            <artifactId>jib-entrypoint-extension</artifactId>
                            <version>18.1.0</version>
                        </dependency>
                    </dependencies>
                </plugin>
                <plugin>
                    <groupId>com.github.ekryd.sortpom</groupId>
                    <artifactId>sortpom-maven-plugin</artifactId>
                    <version>${sortpom-maven-plugin.version}</version>
                    <configuration>
                        <lineSeparator>\n</lineSeparator>
                        <createBackupFile>false</createBackupFile>
                        <sortDependencies>scope,artifactId</sortDependencies>
                        <sortProperties>false</sortProperties>
                        <keepBlankLines>true</keepBlankLines>
                        <nrOfIndentSpace>4</nrOfIndentSpace>
                        <verifyFail>Warn</verifyFail>
                        <expandEmptyElements>false</expandEmptyElements>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>flatten-maven-plugin</artifactId>
                    <version>${flatten-maven-plugin.version}</version>
                    <configuration>
                        <updatePomFile>true</updatePomFile>
                        <keepCommentsInPom>true</keepCommentsInPom>
                        <pomElements>
                            <name>keep</name>
                            <parent>keep</parent>
                            <description>keep</description>
                            <organization>keep</organization>
                            <developers>keep</developers>
                            <scm>remove</scm>
                            <distributionManagement>remove</distributionManagement>
                            <properties>keep</properties>
                            <dependencyManagement>keep</dependencyManagement>
                            <dependencies>keep</dependencies>
                            <build>keep</build>
                            <profiles>keep</profiles>
                        </pomElements>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>com.backbase.buildingblocks</groupId>
                <artifactId>service-sdk-build-utils-maven-plugin</artifactId>
                <version>18.1.0</version>
                <executions>
                    <execution>
                        <id>find-main-package-for-archunit-maven</id>
                        <goals>
                            <goal>find-main-package</goal>
                        </goals>
                        <phase>process-classes</phase>
                        <configuration>
                            <skip>${archunit.skip}</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.societegenerale.commons</groupId>
                <artifactId>arch-unit-maven-plugin</artifactId>
                <configuration>
                    <!-- Avoid build fail if there is issue. True to avoid build failure, default is false -->
                    <noFailOnError>${archunit.noFailOnError}</noFailOnError>
                    <!-- Skip plugin execution. True to skip, default is false -->
                    <skip>${archunit.skip}</skip>
                    <excludedPaths>
                        <excludedPath>generated-sources</excludedPath>
                    </excludedPaths>
                    <rules>
                        <preConfiguredRules>
                            <rule>com.societegenerale.commons.plugin.rules.NoJodaTimeRuleTest</rule>
                        </preConfiguredRules>
                        <configurableRules>
                            <configurableRule>
                                <rule>com.backbase.buildingblocks.archunit.ArchitectureRules</rule>
                                <skip>${archunit.backbase.ArchitectureRules.skip}</skip>
                                <applyOn>
                                    <packageName>${archunit.projectPackage}</packageName>
                                    <scope>main</scope>
                                </applyOn>
                            </configurableRule>
                            <configurableRule>
                                <rule>com.backbase.buildingblocks.archunit.BackbaseGeneralCodingRules</rule>
                                <skip>${archunit.backbase.GeneralCodingRules.skip}</skip>
                                <applyOn>
                                    <packageName>${archunit.projectPackage}</packageName>
                                    <scope>main</scope>
                                </applyOn>
                            </configurableRule>
                            <configurableRule>
                                <rule>com.backbase.buildingblocks.archunit.ConfigurationRules</rule>
                                <skip>${archunit.backbase.ConfigurationRules.skip}</skip>
                                <applyOn>
                                    <packageName>${archunit.projectPackage}</packageName>
                                    <scope>main</scope>
                                </applyOn>
                            </configurableRule>
                            <configurableRule>
                                <rule>com.backbase.buildingblocks.archunit.ControllerRules</rule>
                                <skip>${archunit.backbase.ControllerRules.skip}</skip>
                                <applyOn>
                                    <packageName>${archunit.projectPackage}</packageName>
                                    <scope>main</scope>
                                </applyOn>
                            </configurableRule>
                            <configurableRule>
                                <rule>com.backbase.buildingblocks.archunit.DataMappingRules</rule>
                                <skip>${archunit.backbase.DataMappingRules.skip}</skip>
                                <applyOn>
                                    <packageName>${archunit.projectPackage}</packageName>
                                    <scope>main</scope>
                                </applyOn>
                            </configurableRule>
                            <configurableRule>
                                <rule>com.backbase.buildingblocks.archunit.LoggingRules</rule>
                                <skip>${archunit.backbase.LoggingRules.skip}</skip>
                                <applyOn>
                                    <packageName>${archunit.projectPackage}</packageName>
                                    <scope>main</scope>
                                </applyOn>
                            </configurableRule>
                            <configurableRule>
                                <rule>com.backbase.buildingblocks.archunit.NamingConventionRules</rule>
                                <skip>${archunit.backbase.NamingConventionRules.skip}</skip>
                                <applyOn>
                                    <packageName>${archunit.projectPackage}</packageName>
                                    <scope>main</scope>
                                </applyOn>
                            </configurableRule>
                            <configurableRule>
                                <rule>com.backbase.buildingblocks.archunit.RelationalPersistenceRules</rule>
                                <skip>${archunit.backbase.RelationalPersistenceRules.skip}</skip>
                                <applyOn>
                                    <packageName>${archunit.projectPackage}</packageName>
                                    <scope>main</scope>
                                </applyOn>
                            </configurableRule>
                        </configurableRules>
                    </rules>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>com.backbase.buildingblocks</groupId>
                        <artifactId>service-sdk-archunit</artifactId>
                        <version>18.1.0</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <goals>
                            <goal>arch-test</goal>
                        </goals>
                        <phase>test</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.github.siom79.japicmp</groupId>
                <artifactId>japicmp-maven-plugin</artifactId>
                <version>${japicmp.plugin.version}</version>
                <configuration>
                    <skip>true</skip>
                    <oldVersion>
                        <dependency>
                            <groupId>${project.groupId}</groupId>
                            <artifactId>${project.artifactId}</artifactId>
                            <version>${previous.release.version}</version>
                            <type>${project.packaging}</type>
                        </dependency>
                    </oldVersion>
                    <newVersion>
                        <file>
                            <path>${project.build.directory}/${project.artifactId}-${project.version}.${project.packaging}</path>
                        </file>
                    </newVersion>
                    <parameter>
                        <onlyModified>true</onlyModified>
                        <breakBuildOnBinaryIncompatibleModifications>false</breakBuildOnBinaryIncompatibleModifications>
                        <breakBuildBasedOnSemanticVersioning>false</breakBuildBasedOnSemanticVersioning>
                        <onlyBinaryIncompatible>false</onlyBinaryIncompatible>
                        <ignoreMissingClasses>true</ignoreMissingClasses>
                        <skipPomModules>true</skipPomModules>
                        <noAnnotations>false</noAnnotations>
                        <ignoreNonResolvableArtifacts>true</ignoreNonResolvableArtifacts>
                        <ignoreMissingOldVersion>true</ignoreMissingOldVersion>
                        <ignoreMissingNewVersion>true</ignoreMissingNewVersion>
                        <packagingSupporteds>
                            <packagingSupported>jar</packagingSupported>
                        </packagingSupporteds>
                        <reportOnlyFilename>false</reportOnlyFilename>
                        <skipXmlReport>true</skipXmlReport>
                        <skipHtmlReport>false</skipHtmlReport>
                        <skipDiffReport>true</skipDiffReport>
                    </parameter>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>cmp</goal>
                        </goals>
                        <phase>verify</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>${maven-checkstyle-plugin.version}</version>
                <configuration>
                    <linkXRef>false</linkXRef>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>com.puppycrawl.tools</groupId>
                        <artifactId>checkstyle</artifactId>
                        <version>${checkstyle.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>com.backbase.buildingblocks</groupId>
                        <artifactId>ssdk-checkstyle-config</artifactId>
                        <version>${ssdk-checkstyle-config.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>validate</id>
                        <goals>
                            <goal>check</goal>
                        </goals>
                        <phase>validate</phase>
                        <configuration>
                            <skip>${checkstyle.disable.checks}</skip>
                            <encoding>UTF-8</encoding>
                            <consoleOutput>true</consoleOutput>
                            <failsOnError>${checkstyle.fails-on-error}</failsOnError>
                            <failOnViolation>${checkstyle.fail-on-violation}</failOnViolation>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-enforcer-plugin</artifactId>
                <executions>
                    <execution>
                        <id>enforce-java</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireJavaVersion>
                                    <version>${java.version}</version>
                                </requireJavaVersion>
                            </rules>
                        </configuration>
                    </execution>
                    <execution>
                        <id>enforce-banned-dependencies</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <bannedDependencies>
                                    <!-- enforcing banned dependencies such as GPL mysql drivers -->
                                    <excludes>
                                        <exclude>mysql:mysql-connector-java:*:jar</exclude>
                                        <exclude>com.mysql:mysql-connector-j:*:jar</exclude>
                                        <exclude>com.microsoft.sqlserver:mssql-jdbc:*:jar</exclude>
                                        <exclude>com.oracle.database.jdbc:ojdbc8:*:jar</exclude>
                                        <!--Ban less than JEE9 dependencies-->
                                        <exclude>javax.validation:validation-api:(,3.0)</exclude>
                                        <exclude>javax.servlet:javax.servlet-api:(,5.0)</exclude>
                                        <exclude>javax.el:javax.el-api:(,4.0)</exclude>
                                        <exclude>javax.ws.rs:javax.ws.rs-api:(,3.0)</exclude>
                                        <exclude>javax.websocket:javax.websocket-api:(,2.0)</exclude>
                                        <exclude>javax.json:javax.json-api:(,2.0)</exclude>
                                        <exclude>javax.json.bind:javax.json.bind-api:(,2.0)</exclude>
                                        <exclude>javax.annotation:javax.annotation-api:(,2.0)</exclude>
                                        <exclude>javax.transaction:jta:(,2.0)</exclude>
                                        <exclude>javax.persistence:javax.persistence-api:(,3.0)</exclude>
                                    </excludes>
                                    <includes>
                                        <!--only test and system are allowed-->
                                        <include>mysql:mysql-connector-java:*:jar:test</include>
                                        <include>com.mysql:mysql-connector-j:*:jar:test</include>
                                        <include>com.microsoft.sqlserver:mssql-jdbc:*:jar:test</include>
                                        <include>com.oracle.database.jdbc:ojdbc8:*:jar:test</include>
                                        <include>mysql:mysql-connector-java:*:jar:system</include>
                                        <include>com.mysql:mysql-connector-j:*:jar:system</include>
                                        <include>com.microsoft.sqlserver:mssql-jdbc:*:jar:system</include>
                                        <include>com.oracle.database.jdbc:ojdbc8:*:jar:system</include>
                                    </includes>
                                </bannedDependencies>
                            </rules>
                            <fail>true</fail>
                            <skip>${enforce-banned-dependencies.skip}</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--Failsafe plugin - for running integration tests-->
            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                    <execution>
                        <id>integration-test</id>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the VM argument line used when integration tests are run. -->
                            <argLine>${failsafeArgLine}</argLine>
                            <skipTests>${skip.integration.tests}</skipTests>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-javadoc-plugin</artifactId>
                <configuration>
                    <doclint>none</doclint>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-release-plugin</artifactId>
                <version>${maven-release-plugin.version}</version>
            </plugin>
            <plugin>
                <artifactId>maven-site-plugin</artifactId>
                <version>${maven-site-plugin.version}</version>
                <configuration>
                    <locales>en</locales>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.maven.doxia</groupId>
                        <artifactId>doxia-module-markdown</artifactId>
                        <version>${doxia-module-markdown.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>lt.velykis.maven.skins</groupId>
                        <artifactId>reflow-velocity-tools</artifactId>
                        <version>${reflow-velocity-tools.version}</version>
                    </dependency>
                    <!-- Reflow skin requires Velocity >= 1.7  -->
                    <dependency>
                        <groupId>org.apache.velocity</groupId>
                        <artifactId>velocity</artifactId>
                        <version>${velocity.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>attach-descriptor</id>
                        <goals>
                            <goal>attach-descriptor</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- Surefire plugin - for running unit tests-->
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <!-- Sets the VM argument line used when unit tests are run. -->
                    <argLine>${surefireArgLine}</argLine>
                    <skipTests>${skip.unit.tests}</skipTests>
                    <!-- Excludes integration tests when unit tests are run. -->
                    <excludes>
                        <exclude>**/*IT.java</exclude>
                    </excludes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco.version}</version>
                <executions>
                    <execution>
                        <id>pre-unit-test</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the path to the file which contains the execution data. -->
                            <destFile>${coverage.reports.dir}/jacoco.exec</destFile>
                            <propertyName>surefireArgLine</propertyName>
                        </configuration>
                    </execution>
                    <!-- Ensures that the code coverage report for unit tests is created after unit tests have been run. -->
                    <execution>
                        <id>post-unit-test</id>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <phase>test</phase>
                        <configuration>
                            <!-- Sets the path to the file which contains the execution data. -->
                            <dataFile>${coverage.reports.dir}/jacoco.exec</dataFile>
                            <!-- Sets the output directory for the code coverage report. -->
                            <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
                        </configuration>
                    </execution>
                    <execution>
                        <id>pre-integration-test</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <!-- Sets the path to the file which contains the execution data. -->
                            <destFile>${coverage.reports.dir}/jacoco-it.exec</destFile>
                            <propertyName>failsafeArgLine</propertyName>
                        </configuration>
                    </execution>
                    <execution>
                        <id>post-integration-test</id>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <phase>post-integration-test</phase>
                        <configuration>
                            <!-- Sets the path to the file which contains the execution data. -->
                            <dataFile>${coverage.reports.dir}/jacoco-it.exec</dataFile>
                            <!-- Sets the output directory for the code coverage report. -->
                            <outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.sonarsource.scanner.maven</groupId>
                <artifactId>sonar-maven-plugin</artifactId>
                <version>${sonar-maven-plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <executable>true</executable>
                    <layout>ZIP</layout>
                </configuration>
                <executions>
                    <execution>
                        <id>repackage</id>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.github.ekryd.sortpom</groupId>
                <artifactId>sortpom-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>flattened-pom-sort</id>
                        <goals>
                            <goal>sort</goal>
                        </goals>
                        <phase>verify</phase>
                        <inherited>false</inherited>
                        <configuration>
                            <pomFile>.flattened-pom.xml</pomFile>
                            <sortProperties>true</sortProperties>
                            <skip>false</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>flatten-maven-plugin</artifactId>
                <executions>
                    <!-- enable flattening -->
                    <execution>
                        <id>flatten</id>
                        <goals>
                            <goal>flatten</goal>
                        </goals>
                        <phase>process-resources</phase>
                        <inherited>false</inherited>
                    </execution>
                    <!-- clean flattened pom -->
                    <execution>
                        <id>flatten.clean</id>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                        <phase>clean</phase>
                        <inherited>false</inherited>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <!-- ## jib docker images profiles  ##-->
        <profile>
            <id>docker-image</id>
            <build>
                <plugins>
                    <!-- Determine the main class -->
                    <plugin>
                        <groupId>com.backbase.buildingblocks</groupId>
                        <artifactId>service-sdk-build-utils-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>find-main-class-for-jib</id>
                                <goals>
                                    <goal>find-main-class</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- Use git commit time as creation date for the image -->
                    <plugin>
                        <groupId>pl.project13.maven</groupId>
                        <artifactId>git-commit-id-plugin</artifactId>
                        <configuration>
                            <generateGitPropertiesFile>false</generateGitPropertiesFile>
                            <failOnNoGitDirectory>false</failOnNoGitDirectory>
                            <includeOnlyProperties>
                                <includeOnlyProperty>^git.commit.time$</includeOnlyProperty>
                            </includeOnlyProperties>
                        </configuration>
                        <executions>
                            <execution>
                                <phase>initialize</phase>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- generate "docker.default.tag" which typically is project.version -->
                    <plugin>
                        <groupId>org.codehaus.gmavenplus</groupId>
                        <artifactId>gmavenplus-plugin</artifactId>
                        <version>${gmavenplus-plugin.version}</version>
                        <dependencies>
                            <dependency>
                                <groupId>org.apache.groovy</groupId>
                                <artifactId>groovy-all</artifactId>
                                <version>${groovy.version}</version>
                                <type>pom</type>
                                <scope>runtime</scope>
                            </dependency>
                        </dependencies>
                        <executions>
                            <execution>
                                <id>set-properties</id>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                                <phase>initialize</phase>
                                <configuration>
                                    <scripts>
                                        <script>tag = "${project.version}"
                                            if ("${docker.tag.trim}".equals("true")) {
                                                tag = tag.minus("-SNAPSHOT")
                                            }
                                            project.properties.setProperty('docker.default.tag', tag)
                                            println "docker.default.tag: " + project.properties['docker.default.tag']

                                            //Set image creation time
                                            try {
                                            gitTime = "${git.commit.time}"
                                            if (gitTime?.trim()) {
                                                 project.properties.setProperty('jib.container.creationTime', gitTime)
                                            }
                                            println "jib.container.creationTime: " + project.properties['jib.container.creationTime']
                                            } catch(Exception ex) {
                                                println "WARN: Not a git repo";
                                            }

                                            if (System.getProperty("os.arch") == "aarch64") {
                                              project.properties.setProperty('local-client.arch', "arm64")
                                            } else {
                                              project.properties.setProperty('local-client.arch', "amd64")
                                            }</script>
                                    </scripts>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- building images -->
                    <plugin>
                        <groupId>com.google.cloud.tools</groupId>
                        <artifactId>jib-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>distroless-image-tag</id>
                                <goals>
                                    <goal>${docker.jib.goal}</goal>
                                </goals>
                                <phase>package</phase>
                                <configuration>
                                    <skip>${docker.distroless.tag.skip}</skip>
                                    <from>
                                        <image>${docker.distroless.image}</image>
                                    </from>
                                    <to>
                                        <image>${docker.image.name}:${docker.default.tag}</image>
                                    </to>
                                    <container>
                                        <entrypoint>java,-cp,/app/extras/*:/app/resources:/app/classes:/app/libs/*,${main-class}</entrypoint>
                                        <user>nonroot:nonroot</user>
                                        <workingDirectory>/home/nonroot</workingDirectory>
                                        <extraClasspath>/app/extras/*</extraClasspath>
                                        <environment>
                                            <SPRING_OUTPUT_ANSI_ENABLED>ALWAYS</SPRING_OUTPUT_ANSI_ENABLED>
                                        </environment>
                                    </container>
                                </configuration>
                            </execution>
                            <execution>
                                <id>distroless-image-latest</id>
                                <goals>
                                    <goal>${docker.jib.goal}</goal>
                                </goals>
                                <phase>package</phase>
                                <configuration>
                                    <skip>${docker.distroless.latest.skip}</skip>
                                    <from>
                                        <image>${docker.distroless.image}</image>
                                    </from>
                                    <to>
                                        <image>${docker.image.name}:latest</image>
                                    </to>
                                    <container>
                                        <entrypoint>java,-cp,/app/extras/*:/app/resources:/app/classes:/app/libs/*,${main-class}</entrypoint>
                                        <user>nonroot:nonroot</user>
                                        <workingDirectory>/home/nonroot</workingDirectory>
                                        <extraClasspath>/app/extras/*</extraClasspath>
                                        <environment>
                                            <SPRING_OUTPUT_ANSI_ENABLED>ALWAYS</SPRING_OUTPUT_ANSI_ENABLED>
                                        </environment>
                                    </container>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!-- additional profiles to be used in combination with the main "docker-image" profile -->
        <!-- build to local daemon -->
        <profile>
            <id>local-client</id>
            <properties>
                <docker.jib.goal>dockerBuild</docker.jib.goal>
            </properties>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <!-- Local docker engine doesn't support multiplatform manifest when pushing to it. -->
                            <groupId>com.google.cloud.tools</groupId>
                            <artifactId>jib-maven-plugin</artifactId>
                            <version>${jib-maven-plugin.version}</version>
                            <configuration>
                                <from>
                                    <platforms>
                                        <platform>
                                            <architecture>${local-client.arch}</architecture>
                                            <os>${local-client.os}</os>
                                        </platform>
                                    </platforms>
                                </from>
                            </configuration>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        </profile>
        <!-- disable pushing "latest" tag -->
        <profile>
            <id>no-latest-tag</id>
            <properties>
                <docker.distroless.latest.skip>true</docker.distroless.latest.skip>
            </properties>
        </profile>
        <!-- exclude db drivers -->
        <profile>
            <id>no-jdbc</id>
            <properties>
                <docker.jdbc.mssql>provided</docker.jdbc.mssql>
                <docker.jdbc.mysql>provided</docker.jdbc.mysql>
                <docker.jdbc.oracle>provided</docker.jdbc.oracle>
            </properties>
        </profile>
        <!-- exclude cloud stream binders -->
        <profile>
            <id>no-scs</id>
            <properties>
                <docker.scs.azure>provided</docker.scs.azure>
                <docker.scs.kafka>provided</docker.scs.kafka>
                <docker.scs.rabbit>provided</docker.scs.rabbit>
            </properties>
        </profile>
        <!-- exclude azure-identity -->
        <profile>
            <id>no-azure-identity</id>
            <properties>
                <docker.azure.identity>provided</docker.azure.identity>
            </properties>
        </profile>
        <!-- removes "-SNAPSHOT" when generating a default image tag -->
        <profile>
            <id>trim-snapshot</id>
            <properties>
                <docker.tag.trim>true</docker.tag.trim>
            </properties>
        </profile>
        <!-- disable generating images  -->
        <profile>
            <id>distroless-skip</id>
            <activation>
                <property>
                    <name>docker.distroless.skip</name>
                </property>
            </activation>
            <properties>
                <docker.distroless.latest.skip>true</docker.distroless.latest.skip>
                <docker.distroless.tag.skip>true</docker.distroless.tag.skip>
            </properties>
        </profile>
        <profile>
            <!-- TODO why include-metadata is this here?-->
            <id>include-metadata</id>
            <activation>
                <property>
                    <name>package.properties.metadata</name>
                    <value>true</value>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>properties-maven-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>org.springframework.cloud</groupId>
                        <artifactId>spring-cloud-app-starter-metadata-maven-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>only-eclipse</id>
            <activation>
                <property>
                    <name>m2e.version</name>
                </property>
            </activation>
            <build>
                <pluginManagement>
                    <plugins>
                        <plugin>
                            <groupId>org.liquibase</groupId>
                            <artifactId>liquibase-maven-plugin</artifactId>
                            <version>${liquibase.version}</version>
                            <dependencies>
                                <dependency>
                                    <groupId>com.backbase.buildingblocks</groupId>
                                    <artifactId>liquibase-lint-extension</artifactId>
                                </dependency>
                            </dependencies>
                        </plugin>
                    </plugins>
                </pluginManagement>
            </build>
        </profile>
    </profiles>
</project>
