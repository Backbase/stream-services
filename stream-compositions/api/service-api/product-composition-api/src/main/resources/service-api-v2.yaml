openapi: 3.0.3
info:
  title: Product composition API
  version: 2.0.0
servers:
  - url: http://localhost:8080/service-api/v2
    description: The server
tags:
  - name: ProductComposition
paths:
  /service-api/v2/ingest/pull:
    post:
      tags:
        - ProductComposition
      summary: Ingests products (in pull mode).
      description: Ingests products (in pull mode).
      operationId: pullIngestProduct
      requestBody:
        description: Product Pull Ingestion Request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPullIngestionRequest'
      responses:
        "201":
          description: Products ingested.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductIngestionResponse'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        "500":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

  /service-api/v2/ingest/push:
    post:
      tags:
        - ProductComposition
      summary: Ingests products (in push mode).
      description: Ingests poducts (in push mode).
      operationId: pushIngestProduct
      requestBody:
        description: Push Ingestion Request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPushIngestionRequest'
      responses:
        "201":
          description: Products ingested.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductIngestionResponse'
        "400":
          description: BadRequest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        "500":
          description: InternalServerError
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

components:
  schemas:
    BadRequest:
      required:
        - message
      type: object
      properties:
        message:
          type: string

    ProductPullIngestionRequest:
      type: object
      properties:
        legalEntityExternalId:
          type: string
        legalEntityInternalId:
          type: string
        serviceAgreementExternalId:
          type: string
        serviceAgreementInternalId:
          type: string
        userExternalId:
          type: string
        userInternalId:
          type: string
        referenceJobRoleNames:
          $ref: '../../../../../../../api/stream-legal-entity/openapi.yaml#/components/schemas/JobProfileUser/properties/referenceJobRoleNames'
          description: The reference job roles that should get assigned to the user
        membershipAccounts:
          type: array
          items:
            type: string
        additions:
          type: object
          additionalProperties:
            type: string

    ProductPushIngestionRequest:
      type: object
      properties:
        productGroup:
          $ref: '#/components/schemas/ProductGroup'

    ProductGroup:
      type: object
      description: "Products assigned to service agreement"
      allOf:
        - $ref: '#/components/schemas/BaseProductGroup'
      properties:
        serviceAgreement:
          $ref: '#/components/schemas/ServiceAgreement'
        assignedPermissions:
          type: array
          items:
            $ref: '#/components/schemas/AssignedPermission'

    BatchProductGroup:
      type: object
      description: "Product groups assigned to the users within same legal entity"
      properties:
        serviceAgreement:
          $ref: '#/components/schemas/ServiceAgreement'
        productGroups:
          type: array
          items:
            $ref: '#/components/schemas/BaseProductGroup'

    BaseProductGroup:
      type: object
      description: "Product groups assigned to the users within same legal entity"
      properties:
        internalId:
          $ref: '#/components/schemas/InternalIdentifier'
        productGroupType:
          type: string
          default: ARRANGEMENTS
          enum:
            - ARRANGEMENTS
            - JOURNEYS
            - REPOSITORIES
        name:
          maxLength: 128
          minLength: 1
          pattern: ^\S(.*(\S))?$
          type: string
          description: Product group name
        description:
          maxLength: 255
          minLength: 1
          pattern: ^\S(.*(\S))?$
          type: string
          description: Product group description
        users:
          type: array
          items:
            $ref: '#/components/schemas/JobProfileUser'
        currentAccounts:
          type: array
          items:
            $ref: '#/components/schemas/CurrentAccount'
        savingAccounts:
          type: array
          items:
            $ref: '#/components/schemas/SavingsAccount'
        debitCards:
          type: array
          items:
            $ref: '#/components/schemas/DebitCard'
        creditCards:
          type: array
          items:
            $ref: '#/components/schemas/CreditCard'
        loans:
          type: array
          items:
            $ref: '#/components/schemas/Loan'
        termDeposits:
          type: array
          items:
            $ref: '#/components/schemas/TermDeposit'
        investmentAccounts:
          type: array
          items:
            $ref: '#/components/schemas/InvestmentAccount'
        customProducts:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        customDataGroupItems:
          type: array
          items:
            $ref: '#/components/schemas/CustomDataGroupItem'

    BaseProduct:
      title: Base Product
      description: |
        The Base product holds all common properties between different product types
      type: object
      properties:
        internalId:
          $ref: '#/components/schemas/InternalIdentifier'
        externalId:
          minLength: 1
          maxLength: 50
          type: string
          description: A unique identifier for the product coming from the core banking system.
        productTypeExternalId:
          title: External ID of the Product Type as setup in Product Summary
          maxLength: 64
          minLength: 1
          pattern: ^[^\r\n]{1,64}$
          type: string
        legalEntities:
          type: array
          items:
            $ref: '#/components/schemas/LegalEntityReference'
        name:
          type: string
          maxLength: 50
          description: The name that can be assigned by the bank to label a product.
        externalTransferAllowed:
          type: boolean
          description: Defines if transfer to another party is allowed.
        crossCurrencyAllowed:
          type: boolean
          description: Defines if cross currency transfer is allowed
        bankAlias:
          maxLength: 50
          type: string
          description: The name that can be assigned by the bank to label the product.
        sourceId:
          maxLength: 11
          type: string
          description: Indicate if the account is regular or external
        accountOpeningDate:
          type: string
          description: The date of activation of the account in the bank's system.
          format: 'date-time'
        lastUpdateDate:
          type: string
          format: 'date-time'
          description: Last date of balance (or other) parameter update for the particular product
        externalParentId:
          maxLength: 50
          type: string
          description: Indicate if the account has parent child relationship with another account
        state:
          type: object
          properties:
            externalStateId:
              maxLength: 50
              type: string
              description: An external unique identifier for the product state object.
            state:
              maxLength: 50
              type: string
              description: Name that describes the specific product state.
        currency:
          $ref: '#/components/schemas/CurrencyCode'
        amountInArrear:
          $ref: '#/components/schemas/AmountInArrear'
        overdueSince:
          $ref: '#/components/schemas/OverdueSince'
        debitCardsItems:
          type: array
          items:
            $ref: '#/components/schemas/DebitCardItem'
        usersPreferences:
          type: array
          items:
            $ref: '#/components/schemas/UserPreferences'
        additions:
          type: object
          additionalProperties:
            type: string
    CurrentAccount:
      properties:
        bookedBalance:
          $ref: '#/components/schemas/BookedBalance'
        availableBalance:
          $ref: '#/components/schemas/AvailableBalance'
        creditLimit:
          $ref: '#/components/schemas/CreditLimit'
        IBAN:
          $ref: '#/components/schemas/IBAN'
        BBAN:
          $ref: '#/components/schemas/BBAN'
        urgentTransferAllowed:
          $ref: '#/components/schemas/UrgentTransfer'
        BIC:
          $ref: '#/components/schemas/BIC'
        panSuffix:
          $ref: '#/components/schemas/PanSuffix'
        productNumber:
          $ref: '#/components/schemas/ProductNumber'
        bankBranchCode:
          $ref: '#/components/schemas/BankBranchCode'
        accountInterestRate:
          $ref: '#/components/schemas/AccountInterestRate'
        valueDateBalance:
          $ref: '#/components/schemas/ValueDateBalance'
        creditLimitUsage:
          $ref: '#/components/schemas/CreditLimitUsage'
        creditLimitInterestRate:
          $ref: '#/components/schemas/CreditLimitInterestRate'
        creditLimitExpiryDate:
          $ref: '#/components/schemas/CreditLimitExpiryDate'
        accruedInterest:
          $ref: '#/components/schemas/AccruedInterest'
        accountHolderName:
          $ref: '#/components/schemas/AccountHolderName'
        startDate:
          $ref: '#/components/schemas/StartDate'
        minimumRequiredBalance:
          $ref: '#/components/schemas/MinimumRequiredBalance'
        accountHolderAddressLine1:
          $ref: '#/components/schemas/AccountHolderAddressLine1'
        accountHolderAddressLine2:
          $ref: '#/components/schemas/AccountHolderAddressLine2'
        accountHolderStreetName:
          $ref: '#/components/schemas/AccountHolderStreetName'
        town:
          $ref: '#/components/schemas/Town'
        postCode:
          $ref: '#/components/schemas/PostCode'
        countrySubDivision:
          $ref: '#/components/schemas/CountrySubDivision'
        creditAccount:
          $ref: '#/components/schemas/CreditAccount'
        debitAccount:
          $ref: '#/components/schemas/DebitAccount'
        accountHolderCountry:
          $ref: '#/components/schemas/AccountHolderCountry'
      allOf:
        - $ref: '#/components/schemas/BaseProduct'
    SavingsAccount:
      allOf:
        - $ref: '#/components/schemas/BaseProduct'
      properties:
        availableBalance:
          $ref: '#/components/schemas/AvailableBalance'
        bookedBalance:
          $ref: '#/components/schemas/BookedBalance'
        accruedInterest:
          $ref: '#/components/schemas/AccruedInterest'
        IBAN:
          $ref: '#/components/schemas/IBAN'
        BBAN:
          $ref: '#/components/schemas/BBAN'
        urgentTransferAllowed:
          $ref: '#/components/schemas/UrgentTransfer'
        BIC:
          $ref: '#/components/schemas/BIC'
        panSuffix:
          $ref: '#/components/schemas/PanSuffix'
        productNumber:
          $ref: '#/components/schemas/ProductNumber'
        bankBranchCode:
          $ref: '#/components/schemas/BankBranchCode'
        accountInterestRate:
          $ref: '#/components/schemas/AccountInterestRate'
        minimumRequiredBalance:
          $ref: '#/components/schemas/MinimumRequiredBalance'
        startDate:
          $ref: '#/components/schemas/StartDate'
        termUnit:
          $ref: '#/components/schemas/TermUnit'
        termNumber:
          $ref: '#/components/schemas/TermNumber'
        maturityDate:
          $ref: '#/components/schemas/MaturityDate'
        maturityAmount:
          $ref: '#/components/schemas/MaturityAmount'
        autoRenewalIndicator:
          $ref: '#/components/schemas/AutoRenewalIndicator'
        interestPaymentFrequencyUnit:
          $ref: '#/components/schemas/InterestPaymentFrequencyUnit'
        interestPaymentFrequencyNumber:
          $ref: '#/components/schemas/InterestPaymentFrequencyNumber'
        principalAmount:
          $ref: '#/components/schemas/PrincipalAmount'
        interestSettlementAccount:
          $ref: '#/components/schemas/InterestSettlementAccount'
        accountHolderName:
          $ref: '#/components/schemas/AccountHolderName'
        valueDateBalance:
          $ref: '#/components/schemas/ValueDateBalance'
        accountHolderAddressLine1:
          $ref: '#/components/schemas/AccountHolderAddressLine1'
        accountHolderAddressLine2:
          $ref: '#/components/schemas/AccountHolderAddressLine2'
        accountHolderStreetName:
          $ref: '#/components/schemas/AccountHolderStreetName'
        town:
          $ref: '#/components/schemas/Town'
        postCode:
          $ref: '#/components/schemas/PostCode'
        countrySubDivision:
          $ref: '#/components/schemas/CountrySubDivision'
        accountHolderCountry:
          $ref: '#/components/schemas/AccountHolderCountry'
        creditAccount:
          $ref: '#/components/schemas/CreditAccount'
        debitAccount:
          $ref: '#/components/schemas/DebitAccount'
    DebitCard:
      allOf:
        - $ref: '#/components/schemas/BaseProduct'
      properties:
        number:
          maxLength: 36
          type: string
          description: First 6 and/or last 4 digits of a Payment card. All other digits will/to be masked. Be aware that using card number differently is potential PCI risk.
        urgentTransferAllowed:
          $ref: '#/components/schemas/UrgentTransfer'
        cardNumber:
          $ref: '#/components/schemas/CardNumber'
        accountInterestRate:
          $ref: '#/components/schemas/AccountInterestRate'
        accountHolderName:
          $ref: '#/components/schemas/AccountHolderName'
        creditAccount:
          $ref: '#/components/schemas/CreditAccount'
        debitAccount:
          $ref: '#/components/schemas/DebitAccount'
        panSuffix:
          $ref: '#/components/schemas/PanSuffix'
        productNumber:
          $ref: '#/components/schemas/ProductNumber'
        startDate:
          $ref: '#/components/schemas/StartDate'
        validThru:
          $ref: '#/components/schemas/ValidThru'
    CreditCard:
      allOf:
        - $ref: '#/components/schemas/BaseProduct'
      properties:
        bookedBalance:
          $ref: '#/components/schemas/BookedBalance'
        availableBalance:
          $ref: '#/components/schemas/AvailableBalance'
        BBAN:
          $ref: '#/components/schemas/BBAN'
        creditLimit:
          $ref: '#/components/schemas/CreditLimit'
        number:
          maxLength: 36
          type: string
          description: First 6 and/or last 4 digits of a Payment card. All other digits will/to be masked. Be aware that using card number differently is potential PCI risk.
        urgentTransferAllowed:
          $ref: '#/components/schemas/UrgentTransfer'
        cardNumber:
          $ref: '#/components/schemas/CardNumber'
        creditCardAccountNumber:
          $ref: '#/components/schemas/CreditCardAccountNumber'
        validThru:
          $ref: '#/components/schemas/ValidThru'
        startDate:
          $ref: '#/components/schemas/StartDate'
        applicableInterestRate:
          $ref: '#/components/schemas/ApplicableInterestRate'
        creditAccount:
          $ref: '#/components/schemas/CreditAccount'
        debitAccount:
          $ref: '#/components/schemas/DebitAccount'
        panSuffix:
          $ref: '#/components/schemas/PanSuffix'
        productNumber:
          $ref: '#/components/schemas/ProductNumber'
        remainingCredit:
          $ref: '#/components/schemas/RemainingCredit'
        outstandingPayment:
          $ref: '#/components/schemas/OutstandingPayment'
        minimumPayment:
          $ref: '#/components/schemas/MinimumPayment'
        minimumPaymentDueDate:
          $ref: '#/components/schemas/MinimumPaymentDueDate'
        principalAmount:
          $ref: '#/components/schemas/PrincipalAmount'
        accountInterestRate:
          $ref: '#/components/schemas/AccountInterestRate'
        accountHolderName:
          $ref: '#/components/schemas/AccountHolderName'
        creditLimitUsage:
          $ref: '#/components/schemas/CreditLimitUsage'
        creditLimitInterestRate:
          $ref: '#/components/schemas/CreditLimitInterestRate'
        accruedInterest:
          $ref: '#/components/schemas/AccruedInterest'
        bankBranchCode:
          $ref: '#/components/schemas/BankBranchCode'
        cardDetails:
          $ref: '#/components/schemas/CardDetailsItem'
    Loan:
      allOf:
        - $ref: '#/components/schemas/BaseProduct'
      properties:
        bookedBalance:
          $ref: '#/components/schemas/BookedBalance'
        availableBalance:
          $ref: '#/components/schemas/AvailableBalance'
        principalAmount:
          $ref: '#/components/schemas/PrincipalAmount'
        urgentTransferAllowed:
          $ref: '#/components/schemas/UrgentTransfer'
        panSuffix:
          $ref: '#/components/schemas/PanSuffix'
        productNumber:
          $ref: '#/components/schemas/ProductNumber'
        accountInterestRate:
          $ref: '#/components/schemas/AccountInterestRate'
        termUnit:
          $ref: '#/components/schemas/TermUnit'
        termNumber:
          $ref: '#/components/schemas/TermNumber'
        outstandingPrincipalAmount:
          $ref: '#/components/schemas/OutstandingPrincipalAmount'
        outstandingPayment:
          $ref: '#/components/schemas/OutstandingPayment'
        monthlyInstalmentAmount:
          $ref: '#/components/schemas/MonthlyInstalmentAmount'
        interestSettlementAccount:
          $ref: '#/components/schemas/InterestSettlementAccount'
        minimumPayment:
          $ref: '#/components/schemas/MinimumPayment'
        minimumPaymentDueDate:
          $ref: '#/components/schemas/MinimumPaymentDueDate'
        accruedInterest:
          $ref: '#/components/schemas/AccruedInterest'
        accountHolderName:
          $ref: '#/components/schemas/AccountHolderName'
        maturityDate:
          $ref: '#/components/schemas/MaturityDate'
        valueDateBalance:
          $ref: '#/components/schemas/ValueDateBalance'
        creditAccount:
          $ref: '#/components/schemas/CreditAccount'
        creditLimit:
          $ref: '#/components/schemas/CreditLimit'
        debitAccount:
          $ref: '#/components/schemas/DebitAccount'
        IBAN:
          $ref: '#/components/schemas/IBAN'
        BBAN:
          $ref: '#/components/schemas/BBAN'
        bankBranchCode:
          $ref: '#/components/schemas/BankBranchCode'
    TermDeposit:
      allOf:
        - $ref: '#/components/schemas/BaseProduct'
      properties:
        bookedBalance:
          $ref: '#/components/schemas/BookedBalance'
        principalAmount:
          $ref: '#/components/schemas/PrincipalAmount'
        accruedInterest:
          $ref: '#/components/schemas/AccruedInterest'
        IBAN:
          $ref: '#/components/schemas/IBAN'
        BBAN:
          $ref: '#/components/schemas/BBAN'
        urgentTransferAllowed:
          $ref: '#/components/schemas/UrgentTransfer'
        panSuffix:
          $ref: '#/components/schemas/PanSuffix'
        productNumber:
          $ref: '#/components/schemas/ProductNumber'
        accountInterestRate:
          $ref: '#/components/schemas/AccountInterestRate'
        startDate:
          $ref: '#/components/schemas/StartDate'
        termUnit:
          $ref: '#/components/schemas/TermUnit'
        termNumber:
          $ref: '#/components/schemas/TermNumber'
        maturityDate:
          $ref: '#/components/schemas/MaturityDate'
        maturityAmount:
          $ref: '#/components/schemas/MaturityAmount'
        autoRenewalIndicator:
          $ref: '#/components/schemas/AutoRenewalIndicator'
        interestPaymentFrequencyUnit:
          $ref: '#/components/schemas/InterestPaymentFrequencyUnit'
        interestPaymentFrequencyNumber:
          $ref: '#/components/schemas/InterestPaymentFrequencyNumber'
        interestSettlementAccount:
          $ref: '#/components/schemas/InterestSettlementAccount'
        valueDateBalance:
          $ref: '#/components/schemas/ValueDateBalance'
        accountHolderName:
          $ref: '#/components/schemas/AccountHolderName'
        outstandingPrincipalAmount:
          $ref: '#/components/schemas/OutstandingPrincipalAmount'
        creditAccount:
          $ref: '#/components/schemas/CreditAccount'
        debitAccount:
          $ref: '#/components/schemas/DebitAccount'
        minimumRequiredBalance:
          $ref: '#/components/schemas/MinimumRequiredBalance'
    InvestmentAccount:
      allOf:
        - $ref: '#/components/schemas/BaseProduct'
      properties:
        currentInvestment:
          $ref: '#/components/schemas/CurrentInvestment'
        urgentTransferAllowed:
          $ref: '#/components/schemas/UrgentTransfer'
        panSuffix:
          $ref: '#/components/schemas/PanSuffix'
        productNumber:
          $ref: '#/components/schemas/ProductNumber'
        IBAN:
          $ref: '#/components/schemas/IBAN'
        BBAN:
          $ref: '#/components/schemas/BBAN'
    Product:
      allOf:
        - $ref: '#/components/schemas/BaseProduct'
      properties:
        ### Current Account Fields
        bookedBalance:
          $ref: '#/components/schemas/BookedBalance'
        availableBalance:
          $ref: '#/components/schemas/AvailableBalance'
        creditLimit:
          $ref: '#/components/schemas/CreditLimit'
        IBAN:
          $ref: '#/components/schemas/IBAN'
        BBAN:
          $ref: '#/components/schemas/BBAN'
        urgentTransferAllowed:
          $ref: '#/components/schemas/UrgentTransfer'
        BIC:
          $ref: '#/components/schemas/BIC'
        bankBranchCode:
          $ref: '#/components/schemas/BankBranchCode'
        accountInterestRate:
          $ref: '#/components/schemas/AccountInterestRate'
        valueDateBalance:
          $ref: '#/components/schemas/ValueDateBalance'
        creditLimitUsage:
          $ref: '#/components/schemas/CreditLimitUsage'
        creditLimitInterestRate:
          $ref: '#/components/schemas/CreditLimitInterestRate'
        creditLimitExpiryDate:
          $ref: '#/components/schemas/CreditLimitExpiryDate'
        accruedInterest:
          $ref: '#/components/schemas/AccruedInterest'
        accountHolderName:
          $ref: '#/components/schemas/AccountHolderName'
        startDate:
          $ref: '#/components/schemas/StartDate'
        minimumRequiredBalance:
          $ref: '#/components/schemas/MinimumRequiredBalance'
        accountHolderAddressLine1:
          $ref: '#/components/schemas/AccountHolderAddressLine1'
        accountHolderAddressLine2:
          $ref: '#/components/schemas/AccountHolderAddressLine2'
        accountHolderStreetName:
          $ref: '#/components/schemas/AccountHolderStreetName'
        town:
          $ref: '#/components/schemas/Town'
        postCode:
          $ref: '#/components/schemas/PostCode'
        countrySubDivision:
          $ref: '#/components/schemas/CountrySubDivision'
        creditAccount:
          $ref: '#/components/schemas/CreditAccount'
        debitAccount:
          $ref: '#/components/schemas/DebitAccount'
        accountHolderCountry:
          $ref: '#/components/schemas/AccountHolderCountry'
        # Saving Accounts Fields
        termUnit:
          $ref: '#/components/schemas/TermUnit'
        termNumber:
          $ref: '#/components/schemas/TermNumber'
        maturityDate:
          $ref: '#/components/schemas/MaturityDate'
        maturityAmount:
          $ref: '#/components/schemas/MaturityAmount'
        autoRenewalIndicator:
          $ref: '#/components/schemas/AutoRenewalIndicator'
        interestPaymentFrequencyUnit:
          $ref: '#/components/schemas/InterestPaymentFrequencyUnit'
        interestPaymentFrequencyNumber:
          $ref: '#/components/schemas/InterestPaymentFrequencyNumber'
        principalAmount:
          $ref: '#/components/schemas/PrincipalAmount'
        interestSettlementAccount:
          $ref: '#/components/schemas/InterestSettlementAccount'
        # Debit Cards
        number:
          maxLength: 36
          type: string
          description: First 6 and/or last 4 digits of a Payment card. All other digits will/to be masked. Be aware that using card number differently is potential PCI risk.
        cardNumber:
          $ref: '#/components/schemas/CardNumber'
        validThru:
          $ref: '#/components/schemas/ValidThru'

        # Credit Cards Fields
        creditCardAccountNumber:
          $ref: '#/components/schemas/CreditCardAccountNumber'
        applicableInterestRate:
          $ref: '#/components/schemas/ApplicableInterestRate'
        remainingCredit:
          $ref: '#/components/schemas/RemainingCredit'
        outstandingPayment:
          $ref: '#/components/schemas/OutstandingPayment'
        minimumPayment:
          $ref: '#/components/schemas/MinimumPayment'
        minimumPaymentDueDate:
          $ref: '#/components/schemas/MinimumPaymentDueDate'

        # Loans
        productNumber:
          $ref: '#/components/schemas/ProductNumber'
        outstandingPrincipalAmount:
          $ref: '#/components/schemas/OutstandingPrincipalAmount'
        monthlyInstalmentAmount:
          $ref: '#/components/schemas/MonthlyInstalmentAmount'

    DebitCardItem:
      type: object
      properties:
        number:
          maxLength: 36
          type: string
          description: First 6 and/or last 4 digits of a Payment card. All other digits will/to be masked. Be aware that using card number differently is potential PCI risk
        expiryDate:
          maxLength: 32
          type: string
          description: Expiration date of a credit card, after which is no longer valid
        cardId:
          maxLength: 32
          type: string
          description: External ID of the card
        cardholderName:
          maxLength: 64
          type: string
          description: First Name and Last Name of card holder.
        cardType:
          maxLength: 32
          type: string
          description: Card type to change card image based on it, ex. Maestro Gold
        cardStatus:
          maxLength: 32
          type: string
          description: Status of the card ex. Active, Expired etc
    CardDetailsItem:
      required:
        - cardProvider
      type: object
      properties:
        cardProvider:
          maxLength: 40
          type: string
          description: |
            This field specifies the Card Provider associated with the Account.
            Example: Maestro, Visa, Master Card, American Express or Discover.
        secured:
          type: boolean
          description: |
            A card can either be Secured or Unsecured.
            
            * true: amount deposited in the CC determines the Limit.
            * false: credit limit is based off various factors including the CC holder’s Credit Score, Credit History and is determined by the lending bank.
        availableCashCredit:
          type: number
          format: double
          description: |
            The amount of money currently available for a bank cash advance.
            
            This is calculated given the portion of the CashCreditLimit which has been used for Cash Advance Transactions.
        cashCreditLimit:
          type: number
          format: double
          description: The portion of the credit limit available for bank cash advance transactions..
        lastPaymentDate:
          type: string
          format: date
          description: The Date the last payment was made on the Credit-based arrangement
        lastPaymentAmount:
          type: number
          format: double
          description: The amount of the last payment that was made on the Credit-based arrangement.
        latePaymentFee:
          type: string
          pattern: /^\d+(\.\d+)?%?$/
          description: |
            The charge triggered by infractions such as late credit card payments. It can be expressed as fixed amount or as percent.
            
            Example:
              * 12.32: as fixed amount
              * 3.14%: as percent
        previousStatementDate:
          type: string
          format: date
          description: The date of the previous billing cycle for the arrangement.
        previousStatementBalance:
          type: number
          format: double
          description: The amount owed on the credit card as of the previous billing cycle.
        statementBalance:
          type: number
          format: double
          description: The amount owed on the credit card as of the latest billing cycle.

    LegalEntityReference:
      title: Legal Entity Reference
      properties:
        internalId:
          $ref: '#/components/schemas/InternalIdentifier'
        externalId:
          $ref: '#/components/schemas/ExternalIdentifier'
      required:
        - internalId
        - externalId
    LegalEntity:
      title: Legal Entity
      description: |
        A Legal Entity is any personal or non-personal entity that is involved in a transaction or an product with the bank. Both the bank and its customers are legal entities
        
        A Legal Entity:
        * Has one or more users that act on its behalf.
        * Owns one or more products.
        * A legal entity hierarchy is a collection of parent-child relationships. For example, within the same deployment, this allows you to:
        * Set up a holding structure for a corporate customer of the bank.
        * Set up a structure within the bank to support country and regional offices.
      type: object
      properties:
        name:
          type: string
        activateSingleServiceAgreement:
          type: boolean
        internalId:
          $ref: '#/components/schemas/InternalIdentifier'
        externalId:
          $ref: '#/components/schemas/ExternalIdentifier'
        legalEntityType:
          $ref: '#/components/schemas/LegalEntityType'
        realmName:
          type: string
          description: Realm to which the Legal Entity should be mapped.
        parentExternalId:
          $ref: '#/components/schemas/ExternalIdentifier'
        parentInternalId:
          $ref: '#/components/schemas/InternalIdentifier'
        subsidiaries:
          type: array
          items:
            $ref: '#/components/schemas/LegalEntity'
        productGroups:
          type: array
          items:
            $ref: "#/components/schemas/ProductGroup"
        limit:
          $ref: '#/components/schemas/Limit'
        users:
          type: array
          items:
            $ref: '#/components/schemas/JobProfileUser'
        referenceJobRoles:
          type: array
          items:
            $ref: '#/components/schemas/ReferenceJobRole'
        administrators:
          type: array
          items:
            $ref: '#/components/schemas/User'
        masterServiceAgreement:
          $ref: '#/components/schemas/ServiceAgreement'
        customServiceAgreement:
          $ref: '#/components/schemas/ServiceAgreement'
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/ExternalContact'
        additions:
          type: object
          additionalProperties:
            type: string
      required:
        - name
        - external
        - legalEntityType
        - administrators
        - jobProfile
    JobProfileUser:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        legalEntityReference:
          $ref: '#/components/schemas/LegalEntityReference'
        referenceJobRoleNames:
          type: array
          items:
            type: string
        businessFunctionGroups:
          type: array
          description: Business Function Groups
          items:
            $ref: '#/components/schemas/BusinessFunctionGroup'
        approvalStatus:
          $ref: '#/components/schemas/ApprovalStatus'
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/ExternalContact'
      required:
        - user
    LegalEntityType:
      type: string
      title: Legal Entity Type
      description: Type of the legal entity. Bank or Customer.
      enum:
        - CUSTOMER
        - BANK

    IdentityUserLinkStrategy:
      type: string
      title: Strategy to link user in Identity.
      description: Identity User Creation Strategy to Create Users in Identity or Import Users from Identity.
      default: IDENTITY_AGNOSTIC
      enum:
        - IMPORT_FROM_IDENTIY
        - CREATE_IN_IDENTITY
        - IDENTITY_AGNOSTIC

    User:
      title: User
      description: |
        User that accessses the system on behalf of the Legal Entity
        A User is a person who interacts with the bank and who uses Backbase applications on behalf of the legal entity they are representing.
      type: object
      properties:
        internalId:
          $ref: '#/components/schemas/InternalIdentifier'
        externalId:
          $ref: '#/components/schemas/ExternalIdentifier'
        legalEntityId:
          $ref: '#/components/schemas/InternalIdentifier'
        emailAddress:
          $ref: '#/components/schemas/EmailAddress'
        mobileNumber:
          $ref: '#/components/schemas/PhoneNumber'
        fullName:
          type: string
        supportsLimit:
          type: boolean
        limit:
          $ref: '#/components/schemas/Limit'
        additions:
          type: object
          additionalProperties:
            type: string
        attributes:
          type: object
          description: Custom attributes to be added to the user.
          additionalProperties:
            type: string
        identityLinkStrategy:
          $ref: '#/components/schemas/IdentityUserLinkStrategy'
        userProfile:
          $ref: '#/components/schemas/UserProfile'
        locked:
          type: boolean
          description: Identity status. If true identity will be locked.
        additionalRealmRoles:
          type: array
          items:
            type: String
      required:
        - externalId
        - fullName
    EmailAddress:
      title: "The email addresses the user can be reached by."
      required:
        - address
        - key
        - type
      type: object
      properties:
        key:
          maxLength: 70
          minLength: 1
          type: string
          description: Unique key identifying the email address.
        type:
          maxLength: 36
          minLength: 1
          type: string
          description: Key identifying the type of electronic address, e.g. work or personal.
        primary:
          type: boolean
          description: Flag denoting whether this is the main electronic address.
        address:
          maxLength: 255
          minLength: 1
          type: string
          description: Address.
    PhoneNumber:
      required:
        - key
        - number
        - type
      type: object
      properties:
        key:
          maxLength: 70
          minLength: 1
          type: string
          description: Unique key identifying the phone address.
        type:
          maxLength: 36
          minLength: 1
          type: string
          description: Key identifying the type of phone number, e.g. mobile or land line.
        primary:
          type: boolean
          description: Flag denoting whether this is the main phone number.
        number:
          maxLength: 30
          minLength: 1
          type: string
          description: Phone number.
    PostalAddress:
      required:
        - key
        - type
      type: object
      properties:
        key:
          maxLength: 70
          minLength: 1
          type: string
          description: Unique key identifying the postal address.
        type:
          maxLength: 36
          minLength: 1
          type: string
          description: Key identifying the type of postal address, e.g. residential, business, po-box, mail-to, delivery-to.
        primary:
          type: boolean
          description: Flag denoting whether this is the main postal address.
        department:
          maxLength: 70
          type: string
          description: Department.
        subDepartment:
          maxLength: 70
          type: string
          description: Sub Department.
        addressLine:
          maxLength: 70
          type: string
          description: Address Line.
        buildingNumber:
          maxLength: 255
          type: string
          description: Building number.
        streetName:
          maxLength: 255
          type: string
          description: Street.
        townName:
          maxLength: 35
          type: string
          description: Town.
        postalCode:
          maxLength: 16
          type: string
          description: Postcode.
        countrySubDivision:
          maxLength: 35
          type: string
          description: Country sub-division.
        country:
          maxLength: 3
          type: string
          description: Country code - ISO 3166.
    Limit:
      title: Limit
      type: object
      properties:
        currencyCode:
          $ref: '#/components/schemas/CurrencyCode'
        transactional:
          $ref: '#/components/schemas/TransactionalLimit'
        daily:
          $ref: '#/components/schemas/DailyLimit'
        weekly:
          $ref: '#/components/schemas/WeeklyLimit'
        monthly:
          $ref: '#/components/schemas/MonthlyLimit'
        quarterly:
          $ref: '#/components/schemas/QuarterlyLimit'
        yearly:
          $ref: '#/components/schemas/YearlyLimit'
    UserProfile:
      title: UserProfile
      description: |
        User Data for User Profile Manager. Additional to Data included in User Model
      type: object
      properties:
        userId:
          type: string
        externalId:
          type: string
        userName:
          type: string
        name:
          $ref: '#/components/schemas/Name'
        displayName:
          type: string
        nickName:
          type: string
        profileUrl:
          type: string
        personalInformation:
          $ref: '#/components/schemas/PersonalInformation'
        identificationDetails:
          type: array
          items:
            $ref: '#/components/schemas/IdentificationDetails'
        title:
          type: string
        userType:
          type: string
        preferredLanguage:
          type: string
        locale:
          type: string
        timezone:
          type: string
        active:
          type: boolean
        additionalEmails:
          type: array
          items:
            $ref: '#/components/schemas/Multivalued'
        additionalPhoneNumbers:
          type: array
          items:
            $ref: '#/components/schemas/Multivalued'
        ims:
          type: array
          items:
            $ref: '#/components/schemas/Multivalued'
        photos:
          type: array
          items:
            $ref: '#/components/schemas/Multivalued'
        x509Certificates:
          type: array
          items:
            $ref: '#/components/schemas/Multivalued'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/Address'
        extended:
          type: object
      required:
        - userId
        - externalId
        - userName
    Name:
      title: Name
      type: object
      properties:
        formatted:
          type: string
        familyName:
          type: string
        givenName:
          type: string
        middleName:
          type: string
        honorificPrefix:
          type: string
        honorificSuffix:
          type: string
    PersonalInformation:
      title: PersonalInformation
      type: object
      properties:
        gender:
          type: string
        dateOfBirth:
          type: string
        countryOfBirth:
          type: string
        countryOfResidence:
          type: string
        nationalities:
          type: array
          items:
            type: string
        maritalStatus:
          type: string
        educationLevel:
          type: string
        employer:
          type: string
        employmentStatus:
          type: string
    IdentificationDetails:
      title: IdentificationDetails
      type: object
      properties:
        value:
          type: string
        type:
          type: string
        issueDate:
          type: string
          format: date
        expiryDate:
          type: string
          format: date
        issueCountryCode:
          type: string
    Multivalued:
      title: Multivalued
      type: object
      properties:
        value:
          type: string
        display:
          type: string
        type:
          type: string
        primary:
          type: boolean
    Address:
      title: Address
      type: object
      properties:
        formatted:
          type: string
        streetAddress:
          type: string
        locality:
          type: string
        region:
          type: string
        postalCode:
          type: string
        country:
          type: string
        type:
          type: string
        primary:
          type: boolean
    InternalIdentifier:
      title: Interal Identifier
      type: string
      description: Internal Read Only Identifier
    ExternalIdentifier:
      title: External Identifier
      maxLength: 64
      minLength: 1
      pattern: ^[^\r\n]{1,64}$
      type: string
      description: External legal entity identifier.
    ProductIngestionResponse:
      type: object
      properties:
        productGroups:
          type: array
          items:
            $ref: '../../../../../../../api/stream-legal-entity/openapi.yaml#/components/schemas/ProductGroup'

    InternalServerError:
      required:
        - message
      type: object
      properties:
        message:
          type: string

